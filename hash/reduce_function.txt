# https://www.daleseo.com/python-functools-reduce/

from collections import Counter
from functools import reduce
    
def solution(clothes):
    cnt = Counter([kind for name, kind in clothes])
    print(cnt)
    re_list = [kind for name, kind in clothes]
    print(re_list)
    print(Counter(re_list))
    print(cnt.values())
    print(type(cnt.values()))

# 초기값이 x 에 들어감, y 에는 cnt.values() -> list / dict_value type 이 허용됨
    answer = reduce(lambda x, y: x*(y+1), cnt.values(), 1) - 1	
    return answer


# ------------ cpp version ------------ #
1. undeclared ~ : for 문의 {} 확인
2. cout 이 printf 보다 편한점 : 자료형을 맞춰줄 필요가 없음

#include <string>
#include <vector>
#include <unordered_map>
#include <iostream>
#include <stdio.h>

using namespace std;

int solution(vector<vector<string>> clothes) {
    int answer = 1;

    unordered_map <string, int> attributes;
    for(int i = 0; i < clothes.size(); i++){
        attributes[clothes[i][1]]++;
        // cout << "something";
        cout << clothes[i][0] << "\n";
        // auto temp = clothes[i][1];        
        // cout << temp;
        // attributes[temp]++;    
        // cout << i;
    }
    
    // cout << attributes["headgear"];
    for(auto it = attributes.begin(); it != attributes.end(); it++)
        answer *= (it->second+1);
        // cout << it->second;
        // cout << "p";
        // printf("%d \n", it->second);
    answer--;

    return answer;
}

// #include <map>

// using namespace std;

// int solution(vector<vector<string>> clothes) {
//     map<string,int> m; //옷의 종류를 key 해당 종류의 수를 value로 하는 map함수
//     vector<string> v; //옷의 종류를 저장해놓을 벡터함수
//     for(int i=0; i<clothes.size(); i++)
//     {
//         if(m[clothes[i][1]] == 0){ //처음 나오는 옷의 종류라면
//             m[clothes[i][1]] = 1;
//             v.push_back(clothes[i][1]);
//         }
//         else
//         {
//             m[clothes[i][1]]++;
//         }
//         printf("%d \n", i);
//         printf("%s \n", clothes[i][1].c_str());
//     }
//     int result = 1;
//     for(int i=0; i<v.size(); i++)
//     {
//         result *= (m[v[i]]+1);
//     }
//     return result-1;
// }
